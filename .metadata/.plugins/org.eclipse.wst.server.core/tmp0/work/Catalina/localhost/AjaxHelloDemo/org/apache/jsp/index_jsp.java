/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.64
 * Generated at: 2016-04-13 01:55:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\twindow.onload = function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 1. 获取 a 节点，并为其添加 onclick 响应函数\r\n");
      out.write("\t\tdocument.getElementsByTagName(\"a\")[0].onclick = function(){\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 3. 创建一个 XMLHttpRequest 对象\r\n");
      out.write("\t\t\tvar request = new XMLHttpRequest();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 4. 准备发送请求的数据： url\r\n");
      out.write("\t\t\t// 以下为之前较早的 url 形式\r\n");
      out.write("\t\t\t//var url = this.href;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 以下的为添加带有时间戳的 url 形式\r\n");
      out.write("\t\t\t// new Date() 为 js 的对象，并不是 java 中的 date 对象\r\n");
      out.write("\t\t\tvar url = this.href + \"?time=\" + new Date();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar method = \"GET\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 5. 调用 XMLHttpRequest 对象的 open 方法\r\n");
      out.write("\t\t\trequest.open(method, url);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 6. 调用 XMLHttpRequest 对象的 send 方法\r\n");
      out.write("\t\t\trequest.send(null);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 7. 为 XMLHttpRequest 对象添加 onreadystatechange 响应函数\r\n");
      out.write("\t\t\trequest.onreadystatechange = function(){\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// 以下的 alert 为测试 request.readyState 的变化过程，直到 request.readyState 为 4 的时候表示响应的完成 \r\n");
      out.write("\t\t\t\t//alert(request.readyState);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 8. 判断响应是否完成：XMLHttpRequest 对象的 readyState 属性值为 4 的时候，表示响应完成\r\n");
      out.write("\t\t\t\tif(request.readyState == 4){\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// request.readyState == 4 表示响应完成，但是并不代表响应可用\r\n");
      out.write("\t\t\t\t\t// 还需要做以下的判断：即第 9 步 \r\n");
      out.write("\t\t\t\t\t// 9. 再判断响应是否可用： XMLHttpRequest 对象的 status 属性值为 200\r\n");
      out.write("\t\t\t\t\tif(request.status == 200 || request.status == 304){\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t// 10. 打印响应的结果： responseTest\r\n");
      out.write("\t\t\t\t\t\talert(request.responseText);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 2. 取消 a 节点的默认行为\r\n");
      out.write("\t\t\treturn false;\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<h1>The Index Page</h1><hr/>\r\n");
      out.write("\t\r\n");
      out.write("\t<a href=\"helloAjax.txt\">HelloAjax</a><br/>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
